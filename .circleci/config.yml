version: 2.1

orbs:
  # https://circleci.com/orbs/registry/orb/circleci/slack
  slack: circleci/slack@3.4.2

# ======================================================================================================================

# Executors define the environment in which the steps of a job will be run, allowing you to reuse a single executor 
# definition across multiple jobs. https://circleci.com/docs/2.0/configuration-reference/#executors-requires-version-21
executors:
    xcode-executor:
        parameters:
            xcode:
                type: string
                default: "12.2.0"
        macos:
            xcode: << parameters.xcode >>
        environment:
            HOMEBREW_NO_AUTO_UPDATE: 1
            HOMEBREW_NO_INSTALL_CLEANUP: 1

# ======================================================================================================================

workflows:

    # Workflow that runs at midnight UTC every day 
    nightly:
        triggers:
            - schedule:
                cron: "0 6 * * *"
                filters:
                    branches:
                        only:
                            - main
        jobs: 
            - build-all-targets:
                matrix:
                    parameters:                 
                        xcode: ["12.2.0"]
                        configuration: ["Debug", "Release"]
                        report_failure: [true]

            - maps-unit-tests:
                matrix:
                    parameters:
                        xcode: ["12.2.0"]
                        configuration: ["Debug", "Release"]
                        report_failure: [true]

            - run-tests-on-devices:
                name: "Run MapboxTestHost tests on devices"
                device-farm-project: $(AWS_DEVICE_FARM_PROJECT_MAPS)
                device-pool: $(AWS_DEVICE_FARM_5_DEVICE_POOL)
                scheme: "MapboxMapsTestsWithHost"
                app-name: "MapboxTestHost"
                device-tests-always-run: true
                report_failure: true

            - run-tests-on-devices:
                name: "Run Examples tests on devices"
                device-farm-project: $(AWS_DEVICE_FARM_PROJECT_EXAMPLES)
                device-pool: $(AWS_DEVICE_FARM_EXAMPLES_POOL)
                scheme: "Examples"
                app-name: "Examples"
                device-tests-always-run: true
                report_failure: true

            - create-xcframework:
                create-xcframework-always-run: true
                report_failure: true

    steve:
        jobs:
            - build-all-targets:
                matrix:
                    parameters:
                        xcode: ["12.2.0"]
                        configuration: ["Debug", "Release"]

            - binary-size:
                requires: 
                    - build-all-targets

            - metrics:
                requires: 
                    - build-all-targets
                filters:
                    branches:
                        only: main

            - maps-unit-tests:
                name: "Run Unit tests"

            - run-tests-on-devices:
                name: "Run MapboxTestHost tests on devices"
                device-farm-project: $(AWS_DEVICE_FARM_PROJECT_MAPS)
                device-pool: $(AWS_DEVICE_FARM_1_PHONE_POOL)
                scheme: "MapboxMapsTestsWithHost"
                app-name: "MapboxTestHost"

            - run-tests-on-devices:
                name: "Run Examples tests on devices"
                device-farm-project: $(AWS_DEVICE_FARM_PROJECT_EXAMPLES)
                device-pool: $(AWS_DEVICE_FARM_EXAMPLES_POOL)
                scheme: "Examples"
                app-name: "Examples"

            - create-xcframework
            
    public-beta:
        jobs:
            - ios-build-release:
                name: "Public Beta Release"
                filters:
                    branches:
                        only: Release/*

            - ios-release-tag:
                name: "iOS release"
                filters:
                    tags:
                        only: /.*/
                    branches:
                        ignore: /.*/

# ======================================================================================================================

jobs:

    # This is a default job that can be merged into specific jobs. It uses anchors & aliases as described here
    # https://circleci.com/docs/2.0/writing-yaml/#merging-maps
    default-job: &default-job
        parameters:
            xcode:
                type: string
                default: "12.2.0"
            device-farm-project:
                type: string
                default: $(AWS_DEVICE_FARM_PROJECT_MAPS)
            device-pool:
                type: string
                default: $(AWS_DEVICE_FARM_1_PHONE_POOL)
            device-tests-always-run:
                type: boolean
                default: false
            create-xcframework-always-run:
                type: boolean
                default: false
            configuration:
                type: string
                default: "Debug"
            report_failure:
                type: boolean
                default: false
            scheme:
                type: string
                default: "MapboxMapsTestsWithHost"
            app-name:
                type: string
                default: "MapboxTestHost"
        executor:
            name: xcode-executor
            xcode: << parameters.xcode >>
        environment:
            AWS_DEVICE_FARM_DEVICE_POOL: << parameters.device-pool >>
            AWS_DEVICE_FARM_PROJECT: << parameters.device-farm-project >>
            CONFIGURATION: << parameters.configuration >>
        steps:
            # Don't run the default job
            - run: exit 1

    build-all-targets:
        <<: *default-job
        steps:
            - checkout
            - access-token-configs
            - make-deps
            - run: brew install swiftlint
            - build-scheme:
                scheme: MapboxMapsAnnotations
            - build-scheme:
                scheme: MapboxMapsFoundation
            - build-scheme:
                scheme: MapboxMapsGestures
            - build-scheme:
                scheme: MapboxMapsLocation
            - build-scheme:
                scheme: MapboxMapsOffline
            - build-scheme:
                scheme: MapboxMapsOrnaments
            - build-scheme:
                scheme: MapboxMapsSnapshot
            - build-scheme:
                scheme: MapboxMapsStyle
            - build-scheme:
                scheme: MapboxMaps
            - build-scheme:
                scheme: DebugApp
            - store-logs
            - report-failure:
                report_failure: << parameters.report_failure >>
                message: "build-all-targets"
            
    binary-size:
        <<: *default-job
        steps:
            - run: 
                name: Trigger binary size test
                command: |
                    if [ -n "${MOBILE_METRICS_TOKEN}" ]; then
                        if [[ $CIRCLE_BRANCH == main ]]; then
                            curl -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-binary-size\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master?circle-token=${MOBILE_METRICS_TOKEN}
                        else 
                            curl -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-binary-size\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\",\"SOURCE_COMPARE_BASELINE\":\"YES\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master?circle-token=${MOBILE_METRICS_TOKEN}                                                        
                        fi                        
                    else
                        echo "MOBILE_METRICS_TOKEN not provided"
                    fi

    metrics:
        <<: *default-job
        steps:
            - run: 
                name: Trigger metrics
                command: |
                    if [ -n "${MOBILE_METRICS_TOKEN}" ]; then
                        if [[ $CIRCLE_BRANCH == main ]]; then
                            curl -X POST --header "Content-Type: application/json" --data "{\"parameters\":{\"run_ios_maps_v10_benchmark\":true,\"ci_ref\":${CIRCLE_BUILD_NUM}},\"branch\":\"master\"}" https://circleci.com/api/v2/project/github/mapbox/mobile-metrics/pipeline?circle-token=${MOBILE_METRICS_TOKEN}
                        else 
                            echo "TODO: Triggering metrics from other branches"                            
                        fi                        
                    else
                        echo "MOBILE_METRICS_TOKEN not provided"
                    fi
            - report-failure:
                report_failure: << parameters.report_failure >>
                message: "metrics"

    # Run the tests in the MapboxTests scheme
    maps-unit-tests:
        <<: *default-job    
        steps:
            - checkout
            - access-token-configs
            - make-deps
            - test-scheme:
                scheme: MapboxMapsAnnotations
            - test-scheme:
                scheme: MapboxMapsFoundation
            - test-scheme:
                scheme: MapboxMapsGestures
            - test-scheme:
                scheme: MapboxMapsLocation
            - test-scheme:
                scheme: MapboxMapsOffline
            - test-scheme:
                scheme: MapboxMapsOrnaments
            - test-scheme:
                scheme: MapboxMapsSnapshot
            - test-scheme:
                scheme: MapboxMapsStyle 
            - test-scheme:
                scheme: MapboxMaps
            # TODO: Parse xcresults for any tests that ran on Device
            # - gather-xcresults
            # - store-device-farm-artifacts
            - store-logs 
            - report-failure:
                report_failure: << parameters.report_failure >>
                message: "maps-unit-tests"

    # We may want to split this across multiple jobs, rather than multiple
    run-tests-on-devices:
        <<: *default-job
        steps:
            - checkout
            - access-token-configs
            - ensure-text-exists-in-commit:
                commit-text: "[run device tests]"  
                always-run: << parameters.device-tests-always-run >>
            - run: make install-devicefarm-dependencies
            - make-deps
            - device-test-scheme:
                scheme: << parameters.scheme >>
                app-name: << parameters.app-name >>
                configuration: Release
            - gather-xcresults # get xcresults here, may be zipped with more than one result
            
            - run:
                name: Converting and uploading coverage
                command: |
                    make update-codecov-with-profdata SCHEME=<< parameters.scheme >> APP_NAME=<< parameters.app-name >> CONFIGURATION=Release

            - store-device-farm-artifacts
            - store-logs
            - report-failure:
                report_failure: << parameters.report_failure >>
                message: "maps-device-unit-tests"
    
    create-xcframework:
        <<: *default-job
        steps:
            - checkout
            - ensure-text-exists-in-commit:
                commit-text: "[create xcframework]"
                always-run: << parameters.create-xcframework-always-run >>
            - make-deps
            # - make-docs
            - make-xcframework-zip
            - make-xcframeworks-bundle
            - danger
            - report-failure:
                report_failure: << parameters.report_failure >>
                message: "create-xcframework"
    
    # This job was created for the public beta
    ios-build-release:
        <<: *default-job
        steps:
            - checkout
            - ensure-text-exists-in-commit:
                commit-text: "[release]"
                always-run: << parameters.device-tests-always-run >>
            - run:
                name: Extract Version From Commit
                command: |
                    GIT_COMMIT_MSG=`git log --format=oneline -n 1`
                    export VERSION=$(echo $GIT_COMMIT_MSG| cut -d' ' -f3)
                    echo "export VERSION=$VERSION" >> $BASH_ENV
            - slack/notify:
                message: '<$CIRCLE_BUILD_URL|Release build for \`$VERSION\` started.>'
                include_visit_job_action: true
            - make-deps
            - run: pip3 install awscli
            - make-xcframework-zip
            - make-xcframeworks-bundle
            - run: 
                name: Uploading to XCFramework to SDK Registry
                command: |
                    ./scripts/release/upload-to-registry.sh MapboxMaps.xcframework.zip mobile-maps-ios ${VERSION}/packages MapboxMaps.xcframework.zip
            - run: 
                name: Uploading to Direct Download to SDK Registry
                command: |
                    ./scripts/release/upload-to-registry.sh MapboxMaps.zip mobile-maps-ios ${VERSION} mapbox-maps-ios.zip
            - run:
                name: Run `npm ci`
                command: |
                    echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
                    npm ci
                when: always
            - run: 
                name: Creating SDK Registry PR
                command: |
                    ./scripts/release/create-api-downloads-pr.sh mobile-maps-ios ${VERSION}
                when: always
            - run:
                name: Update Package Manifest & Podspec
                command: |
                    ./scripts/release/update-spm-manifest.sh ${VERSION} "$(cat MapboxMaps.xcframework.zip.checksum)"
                when: on_success
            - slack/status:
                fail_only: false
                include_visit_job_action: true
                failure_message: ':tests-fail-red-cross: <$CIRCLE_BUILD_URL|Release build for \`$VERSION\` failed.>'
                success_message: ':green_circle: <$CIRCLE_BUILD_URL|Release build for \`$VERSION\` succeeded!> :tada:'

    ios-release-tag:
        <<: *default-job
        steps:
            - ensure-tag-is-semver-like:
                tag: ${CIRCLE_TAG}
            - slack/notify:
                message: '<$CIRCLE_BUILD_URL|Release tag for \`$CIRCLE_TAG\` started.>'
                include_visit_job_action: true
            - checkout
            - make-deps
            - run: pip3 install awscli
            - make-docs
            - run:
                name: Run `npm ci`
                command: |
                    echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
                    npm ci
                when: always
            - run:
                name: Create draft release on Github
                command: |
                    ./scripts/release/create-github-draft-release.sh ${CIRCLE_TAG}
                when: always
            - slack/status:
                fail_only: false
                include_visit_job_action: true
                failure_message: ':tests-fail-red-cross: <$CIRCLE_BUILD_URL|Release tag for \`$CIRCLE_TAG\` failed.>'
                success_message: ':green_circle: <$CIRCLE_BUILD_URL|Release tag for \`$CIRCLE_TAG\` succeeded!> :tada:'
          
    nightly-tests:
        <<: *default-job
        steps:
            - checkout
        #   - run: |
        #       swift build -Xlinker -LSources/CMapbox/lib -Xswiftc "-lc++" -Xswiftc "-sdk" -Xswiftc "`xcrun --sdk iphonesimulator --show-sdk-path`" -Xswiftc "-target" -Xswiftc "x86_64-apple-ios12.1-simulator" -Xlinker "-framework" -Xlinker "GLKit"
        #       swift package generate-xcodeproj

# ======================================================================================================================        
# Reusable commands
commands:

    # Configurable build/test commands

    access-token-configs:
        steps:
            - run:
                name: Save mapbox access token to configs
                command: |
                    echo "MAPBOX_ACCESS_TOKEN = ${MAPBOX_ACCESS_TOKEN}" > ./developer.xcconfig
                    echo "${MAPBOX_ACCESS_TOKEN}" > ~/.mapbox

    build-for-simulator:
        parameters:
            scheme:
                type: string
        steps:
            - run:
                name: Building scheme << parameters.scheme >> for simulator
                command: |
                    make build-for-simulator SCHEME=<< parameters.scheme >>
                no_output_timeout: 5m

    build-for-testing-simulator:
        parameters:
            scheme:
                type: string
        steps:
            - run:
                name: Build-for-testing scheme << parameters.scheme >> for simulator
                command: |
                    make build-for-testing-simulator SCHEME=<< parameters.scheme >>
                no_output_timeout: 5m
    test-with-simulator:
        parameters:
            scheme:
                type: string
        steps:
            - run:
                name: Testing scheme << parameters.scheme >> with simulator
                command: |
                    make test-without-building-simulator SCHEME=<< parameters.scheme >>
                no_output_timeout: 5m

    build-for-device:
        parameters:
            scheme:
                type: string
        steps:
            - run:
                name: Building scheme << parameters.scheme >> for device
                command: |
                    make build-for-device SCHEME=<< parameters.scheme >>
                no_output_timeout: 5m

    build-scheme:
        parameters:
            scheme:
                type: string
        steps:
            - build-for-simulator:
                scheme: << parameters.scheme >>
            - build-for-device:
                scheme: << parameters.scheme >>
            - run:
                name: Clean Build directory
                command: |
                    rm -rf build/Build

    danger:
        steps:
            - run:
                name: Run Danger
                command: |
                    brew install danger/tap/danger-swift
                    danger-swift ci

    test-scheme:
        parameters:
            scheme:
                type: string
        steps:
            - build-for-testing-simulator:
                scheme: << parameters.scheme >>
            # These are split into 2, with the aim that we'll be able to reuse the build product and test on multiple
            # simulators
            - test-with-simulator:
                scheme: << parameters.scheme >>
            - when:
                condition:
                    equal: ['MapboxMaps', << parameters.scheme >>]
                steps:
                  - code-coverage
            - run:
                name: Clean Build directory
                command: |
                    rm -rf build/Build                
              
    ensure-text-exists-in-commit:
        parameters:
            commit-text:
                type: string
            always-run:
                type: boolean
        steps:
            - run: 
                name: Checking for "<< parameters.commit-text >>" in commit message
                command: |
                    export RUN_JOB="$(git log -1 --pretty=%B | fgrep "<< parameters.commit-text >>" | wc -l)"
                    if << parameters.always-run >>; then 
                        echo "Job configured to always run"
                    elif [[ "$RUN_JOB" -ne "0" ]]; then
                        echo "<< parameters.commit-text >> found."
                    else
                        echo "Skipping job"
                        circleci-agent step halt
                    fi

    ensure-tag-is-semver-like:
        parameters:
            tag: 
                type: string
        steps:
            - run:
                name: Checking << parameters.tag >> is SEMVER like
                command: |
                    if [[ ! << parameters.tag >> =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
                        echo "Skipping job"
                        circleci-agent step halt
                    fi

    device-test-scheme:
        parameters:
            scheme:
                type: string
            app-name:
                type: string
            configuration:
                type: string
        steps:
            - run:
                name: Testing << parameters.scheme >> on AWS Device Farm
                command: |
                    make test-with-device-farm SCHEME=<< parameters.scheme >> APP_NAME=<< parameters.app-name >> CONFIGURATION=<< parameters.configuration >>
                when: always

    store-logs:
        description: "Saving Logs as artifacts"
        steps:
            - run:
                name: Zipping logs
                command: |
                    zip -r build.zip build/Logs
                when: always
            - store_artifacts:
                path: build.zip

    gather-xcresults:
        description: "Gathering results"
        steps:
            - run:
                command: |
                    make gather-results
                when: always

    store-device-farm-artifacts:
        description: "Saving Device Farm results as artifacts."
        steps:
            - run:
                name: Zipping device farm results
                command: |
                    zip -r build.zip build/DeviceFarmResults
                    zip -r build.zip build/testruns
                    zip -r build.zip build/*.json
                when: always
            - store_artifacts:
                path: build.zip

    code-coverage:
        description: "Upload code coverage report"
        steps:
            - run: 
                name: "Upload code coverage report"
                command: |
                    curl -sSfL --retry 5 --connect-timeout 5 https://codecov.io/bash > /tmp/codecov.sh
                    bash /tmp/codecov.sh -X gcov -t $CODECOV_TOKEN -D ./ -J '^MapboxMaps$' -F unit-tests || echo 'Codecov failed to upload'

    make-deps:
        steps:
            - run: make deps

    make-docs:
        description: "Generate documentation"
        steps:
            - run: git submodule update --init -- jazzy-theme 
            - run: cd scripts/doc-generation && ./generate-docs.sh
            - run: zip -r api-docs.zip api-docs
            - store_artifacts:
                path: api-docs.zip

    make-xcframework-zip:
        description: "Create MapboxMaps.xcframework"
        steps:
            - run:
                name: Creating MapboxMaps.xcframework
                command: |
                    make xcframework
            - run:
                name: Zipping xcframework
                command: |
                    cp -r build/Build/Products/XCFramework/MapboxMaps.xcframework ./
                    zip -r MapboxMaps.xcframework.zip MapboxMaps.xcframework LICENSE.md
                    swift package --package-path /Users/distiller/project/ compute-checksum MapboxMaps.xcframework.zip > MapboxMaps.xcframework.zip.checksum
                    echo "Generating Checksum for MapboxMaps.xcframework.zip"
                    cat MapboxMaps.xcframework.zip.checksum
            - store_artifacts:
                path: MapboxMaps.xcframework.zip
            - store_artifacts:
                path: MapboxMaps.xcframework.zip.checksum

    make-xcframeworks-bundle:
        # Requires make-xcframework-zip 
        description: "Create xcframework bundle"
        steps:
            - run:
                name: Creating bundled artifact
                command: |
                    mkdir artifact
                    cp scripts/release/README.md artifact
                    cp -r build/Build/Products/XCFramework/MapboxMaps.xcframework artifact
                    cp /Users/distiller/project/LICENSE.md artifact
                    scripts/framework/make-xcframework.sh MapboxCommon Carthage/Build/iOS artifact
                    scripts/framework/make-xcframework.sh MapboxCoreMaps Carthage/Build/iOS artifact
                    scripts/framework/make-xcframework.sh MapboxMobileEvents Carthage/Build/iOS artifact
                    scripts/framework/make-xcframework.sh Turf Carthage/Build/iOS artifact                    
                    zip -r MapboxMaps.zip artifact
            - store_artifacts:
                path: MapboxMaps.zip

    report-failure:
        parameters:
            report_failure: 
                type: boolean
                default: false
            message:
                type: string
                default: ""
        steps:
            - run:
                name: Detected failure, report to Slack? << parameters.report_failure >>
                command: |
                    if ! << parameters.report_failure >> ; then
                        echo "Skipping Slack notification"
                        circleci-agent step halt
                    fi
                when: on_fail
            - slack/status:
                fail_only: true
                include_visit_job_action: true
                mentions: '$CIRCLE_USERNAME'
                only_for_branches: main
                failure_message: ':tests-fail-red-cross: <$CIRCLE_BUILD_URL| \`<< parameters.message >>\` failed.>'
