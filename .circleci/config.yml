---
version: 2.1

orbs:
  # https://circleci.com/orbs/registry/orb/circleci/slack
  slack: circleci/slack@3.4.2

workflows:

  # Runs daily at midnight UTC
  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - swiftlint:
          xcode: "12.4.0"
      - build-sdk:
          xcode: "12.4.0"
          matrix:
            parameters:
              configuration: ["Debug", "Release"]
              report_failure: [true]
      - build-debug-app:
          report_failure: true
          xcode: "12.4.0"
      - unit-test-sdk:
          xcode: "12.4.0"
          matrix:
            parameters:
              configuration: ["Debug", "Release"]
              report_failure: [true]
      - run-tests-on-devices:
          name: "Run MapboxTestHost tests on devices"
          device-farm-project: $(AWS_DEVICE_FARM_PROJECT_MAPS)
          device-pool: $(AWS_DEVICE_FARM_5_DEVICE_POOL)
          scheme: "MapboxMapsTestsWithHost"
          app-name: "MapboxTestHost"
          device-tests-always-run: true
          report_failure: true
      - run-tests-on-devices:
          name: "Run Examples tests on devices"
          device-farm-project: $(AWS_DEVICE_FARM_PROJECT_EXAMPLES)
          device-pool: $(AWS_DEVICE_FARM_EXAMPLES_POOL)
          scheme: "Examples"
          app-name: "Examples"
          device-tests-always-run: true
          report_failure: true
      - create-xcframework:
          create-xcframework-always-run: true
          report_failure: true

  steve:
    jobs:
      - swiftlint:
          xcode: "12.4.0"
      - build-sdk:
          xcode: "12.4.0"
          matrix:
            parameters:
              configuration: ["Debug", "Release"]
      - build-debug-app:
          xcode: "12.4.0"
      - binary-size:
          requires:
            - build-sdk
      - metrics:
          requires:
            - build-sdk
          filters:
            branches:
              only: main
      - unit-test-sdk:
          name: "Run Unit tests"
          xcode: "12.4.0"
      # Not on main
      - run-tests-on-devices:
          name: "Run MapboxTestHost tests on devices"
          device-farm-project: $(AWS_DEVICE_FARM_PROJECT_MAPS)
          device-pool: $(AWS_DEVICE_FARM_1_PHONE_POOL)
          scheme: "MapboxMapsTestsWithHost"
          app-name: "MapboxTestHost"
          filters:
            branches:
              ignore: main
      - run-tests-on-devices:
          name: "Run Examples tests on devices"
          device-farm-project: $(AWS_DEVICE_FARM_PROJECT_EXAMPLES)
          device-pool: $(AWS_DEVICE_FARM_EXAMPLES_POOL)
          scheme: "Examples"
          app-name: "Examples"
          filters:
            branches:
              ignore: main
      # On main
      - run-tests-on-devices:
          name: "Run MapboxTestHost tests on devices (main)"
          device-farm-project: $(AWS_DEVICE_FARM_PROJECT_MAPS)
          device-pool: $(AWS_DEVICE_FARM_5_DEVICE_POOL)
          scheme: "MapboxMapsTestsWithHost"
          app-name: "MapboxTestHost"
          device-tests-always-run: true
          report_failure: true
          filters:
            branches:
              only: main
      - run-tests-on-devices:
          name: "Run Examples tests on devices (main)"
          device-farm-project: $(AWS_DEVICE_FARM_PROJECT_EXAMPLES)
          device-pool: $(AWS_DEVICE_FARM_EXAMPLES_POOL)
          scheme: "Examples"
          app-name: "Examples"
          device-tests-always-run: true
          report_failure: true
          filters:
            branches:
              only: main
      - create-xcframework

  public-beta:
    jobs:
      - ios-build-release:
          name: "Public Beta Release"
          filters:
            branches:
              only: /Release\/.*/
      - ios-release-tag:
          name: "iOS release"
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/

# ==============================================================================

jobs:

  # This is a base job that can be merged into specific jobs. It uses anchors
  # and aliases as described here
  # https://circleci.com/docs/2.0/writing-yaml/#merging-maps
  base-job: &base-job
    parameters:
      xcode:
        type: string
        default: "12.2.0"
      device-farm-project:
        type: string
        default: $(AWS_DEVICE_FARM_PROJECT_MAPS)
      device-pool:
        type: string
        default: $(AWS_DEVICE_FARM_1_PHONE_POOL)
      device-tests-always-run:
        type: boolean
        default: false
      create-xcframework-always-run:
        type: boolean
        default: false
      configuration:
        type: string
        default: "Debug"
      report_failure:
        type: boolean
        default: false
      scheme:
        type: string
        default: "MapboxMapsTestsWithHost"
      app-name:
        type: string
        default: "MapboxTestHost"
    macos:
      xcode: << parameters.xcode >>
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      AWS_DEVICE_FARM_DEVICE_POOL: << parameters.device-pool >>
      AWS_DEVICE_FARM_PROJECT: << parameters.device-farm-project >>
      CONFIGURATION: << parameters.configuration >>
    steps:
      # Don't run the default job
      - run: exit 1

  swiftlint:
    <<: *base-job
    steps:
      - checkout
      - run: brew install swiftlint
      - run: swiftlint lint --strict

  build-sdk:
    <<: *base-job
    steps:
      - checkout
      - access-token-configs
      - configure-netrc
      - xcode-github-workaround
      - run:
          name: Delete Xcode Workspace so we can build with SPM
          command: rm -rf MapboxMaps.xcworkspace
      - run:
          name: Building MapboxMaps for simulator
          command: make build-sdk-for-simulator
          no_output_timeout: 5m
      - run:
          name: Building MapboxMaps for device
          command: make build-sdk-for-device
          no_output_timeout: 5m
      - locate-derived-data-directory:
          base_name: $(basename $(pwd))
      - store-logs:
          derived_data_path: $DERIVED_DATA_PATH
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "build-sdk"

  build-debug-app:
    <<: *base-job
    steps:
      - checkout
      - access-token-configs
      - configure-netrc
      - xcode-github-workaround
      - run:
          name: Building scheme DebugApp for simulator
          command: make build-app-for-simulator SCHEME=DebugApp
          no_output_timeout: 5m
      - run:
          name: Building scheme DebugApp for device
          command: make build-app-for-device SCHEME=DebugApp
          no_output_timeout: 5m
      - locate-derived-data-directory:
          base_name: Apps
      - store-logs:
          derived_data_path: $DERIVED_DATA_PATH
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "build-debug-app"

  binary-size:
    <<: *base-job
    steps:
      - run:
          name: Trigger binary size test
          command: |
            if [ -n "${MOBILE_METRICS_TOKEN}" ]; then
              if [[ $CIRCLE_BRANCH == main ]]; then
                curl -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-binary-size\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master?circle-token=${MOBILE_METRICS_TOKEN}
              else
                curl -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-binary-size\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\",\"SOURCE_COMPARE_BASELINE\":\"YES\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master?circle-token=${MOBILE_METRICS_TOKEN}
              fi
            else
              echo "MOBILE_METRICS_TOKEN not provided"
            fi

  metrics:
    <<: *base-job
    steps:
      - run:
          name: Trigger metrics
          command: |
            if [ -n "${MOBILE_METRICS_TOKEN}" ]; then
              if [[ $CIRCLE_BRANCH == main ]]; then
                curl -X POST --header "Content-Type: application/json" --data "{\"parameters\":{\"run_ios_maps_v10_benchmark\":true,\"ci_ref\":${CIRCLE_BUILD_NUM}},\"branch\":\"master\"}" https://circleci.com/api/v2/project/github/mapbox/mobile-metrics/pipeline?circle-token=${MOBILE_METRICS_TOKEN}
              else
                echo "TODO: Triggering metrics from other branches"
              fi
            else
              echo "MOBILE_METRICS_TOKEN not provided"
            fi
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "metrics"

  unit-test-sdk:
    <<: *base-job
    steps:
      - checkout
      - access-token-configs
      - configure-netrc
      - xcode-github-workaround
      - run:
          name: Delete Xcode Workspace so we can build with SPM
          command: rm -rf MapboxMaps.xcworkspace
      # Building and testing are split into 2, with the aim that we'll be able to reuse
      # the build product and test on multiple simulators
      - run:
          name: Building MapboxMaps for simulator
          command: make build-sdk-for-testing-simulator
          no_output_timeout: 5m
      - run:
          name: Testing MapboxMaps with simulator
          command: make test-sdk-without-building-simulator
          no_output_timeout: 5m
      - locate-derived-data-directory:
          base_name: $(basename $(pwd))
      - run:
          name: Converting and uploading coverage
          command: |
            pip3 install awscli gitpython
            make update-codecov-with-profdata SCHEME=MapboxMaps BUILD_DIR="$DERIVED_DATA_PATH"
      - store-logs:
          artifact_name: MapboxMaps
          derived_data_path: $DERIVED_DATA_PATH
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "unit-test-sdk"

  # We may want to split this across multiple jobs, rather than multiple
  run-tests-on-devices:
    <<: *base-job
    steps:
      - checkout
      - ensure-text-exists-in-commit:
          commit-text: "[run device tests]"
          always-run: << parameters.device-tests-always-run >>
      - access-token-configs
      - run: make install-devicefarm-dependencies
      - install-dependencies
      - run:
          name: Testing << parameters.scheme >> on AWS Device Farm
          command: make test-with-device-farm SCHEME=<< parameters.scheme >> APP_NAME=<< parameters.app-name >> CONFIGURATION=Release
          when: always
      # get xcresults here, may be zipped with more than one result
      - run:
          name: "Gathering results"
          command: make gather-results
          when: always
      - run:
          name: "Parsing xcresults for errors"
          command: |
            RESULTS=`find build/testruns -name '*.xcresult'`
            pushd scripts/xcparty && swift build
            popd
            xargs ./scripts/xcparty/.build/debug/xcparty \<<< "$RESULTS" | tee build/testruns/failures.txt
          when: on_fail
      - run:
          name: Symbolicate crash logs
          command: make symbolicate SCHEME=<< parameters.scheme >> APP_NAME=<< parameters.app-name >> CONFIGURATION=Release
          when: always
      - run:
          name: Converting and uploading coverage
          command: make device-update-codecov-with-profdata SCHEME=<< parameters.scheme >> APP_NAME=<< parameters.app-name >> CONFIGURATION=Release
      - store-device-farm-artifacts
      - store-logs
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "<< parameters.scheme >> device tests"

  create-xcframework:
    <<: *base-job
    steps:
      - checkout
      - ensure-text-exists-in-commit:
          commit-text: "[create xcframework]"
          always-run: << parameters.create-xcframework-always-run >>
      - install-dependencies
      - make-xcframework-bundle:
          bundle_style: "dynamic"
      - make-xcframework-bundle:
          bundle_style: "static"
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "create-xcframework"

  # This job was created for the public beta and is responsible for building
  # and uploading the xcframework bundle to S3. As well as making appropriate
  # updates to Package Manifest and Podspec. Further, this job will also
  # create a PR in api-downloads for SDK Registry access.
  ios-build-release:
    <<: *base-job
    steps:
      - checkout
      - ensure-text-exists-in-commit:
          commit-text: "[release]"
          always-run: << parameters.device-tests-always-run >>
      - run:
          name: Extract Version From Commit
          command: |
            GIT_COMMIT_MSG=`git log --format=oneline -n 1`
            export VERSION=$(echo $GIT_COMMIT_MSG| cut -d' ' -f3)
            echo "export VERSION=$VERSION" >> $BASH_ENV
      - slack/notify:
          message: '<$CIRCLE_BUILD_URL|Release build for \`$VERSION\` started.>'
          include_visit_job_action: true
      - install-dependencies
      - make-xcframework-bundle:
          bundle_style: "dynamic"
      - make-xcframework-bundle:
          bundle_style: "static"
      - run:
          name: Uploading direct download bundles (static & dynamic) to SDK Registry
          command: |
            ./scripts/release/upload-to-registry.sh MapboxMaps-dynamic.zip mobile-maps-ios ${VERSION} MapboxMaps-dynamic.zip
            ./scripts/release/upload-to-registry.sh MapboxMaps-static.zip mobile-maps-ios ${VERSION} MapboxMaps-static.zip
      - run:
          name: Run `npm ci`
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            npm ci
          when: always
      - run:
          name: Creating SDK Registry PR
          command: ./scripts/release/create-api-downloads-pr.sh mobile-maps-ios ${VERSION}
          when: always
      - run:
          name: Update Package Manifest & Podspec
          command: ./scripts/release/update-dependency-manager-manifests.sh ${VERSION}
          when: on_success
      - slack/status:
          fail_only: false
          include_visit_job_action: true
          failure_message: ':tests-fail-red-cross: <$CIRCLE_BUILD_URL|Release build for \`$VERSION\` failed.>'
          success_message: ':green_circle: <$CIRCLE_BUILD_URL|Release build for \`$VERSION\` succeeded!> :tada:'

  # This job is triggered when a tag is pushed so we can tag a release.
  # It is responsible for making docs, and creating a draft release on Github
  ios-release-tag:
    <<: *base-job
    steps:
      - run:
          name: Verify that tag $CIRCLE_TAG adheres to the Semantic Versioning format
          command: |
            if [[ ! "$CIRCLE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              echo "Skipping job"
              exit 1
            fi
      - slack/notify:
          message: '<$CIRCLE_BUILD_URL|Release tag for \`$CIRCLE_TAG\` started.>'
          include_visit_job_action: true
      - checkout
      - install-dependencies
      - make-docs
      - run:
          name: Run `npm ci`
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            npm ci
          when: always
      - run:
          name: Create draft release on Github
          command: ./scripts/release/create-github-draft-release.sh ${CIRCLE_TAG}
          when: always
      - slack/status:
          fail_only: false
          include_visit_job_action: true
          failure_message: ':tests-fail-red-cross: <$CIRCLE_BUILD_URL|Release tag for \`$CIRCLE_TAG\` failed.>'
          success_message: ':green_circle: <$CIRCLE_BUILD_URL|Release tag for \`$CIRCLE_TAG\` succeeded!> :tada:'

# ==============================================================================
# Reusable commands
commands:

  # Configurable build/test commands

  access-token-configs:
    steps:
      - run:
          name: Save mapbox access token to configs
          command: |
            echo "MAPBOX_ACCESS_TOKEN = ${MAPBOX_ACCESS_TOKEN}" > ./developer.xcconfig
            echo "${MAPBOX_ACCESS_TOKEN}" > ~/.mapbox

  ensure-text-exists-in-commit:
    parameters:
      commit-text:
        type: string
      always-run:
        type: boolean
    steps:
      - run:
          name: Check for "<< parameters.commit-text >>" in commit message
          command: |
            export RUN_JOB="$(git log -1 --pretty=%B | fgrep "<< parameters.commit-text >>" | wc -l)"
            if << parameters.always-run >>; then
              echo "Job configured to always run"
            elif [[ "$RUN_JOB" -ne "0" ]]; then
              echo "<< parameters.commit-text >> found."
            else
              echo "Skipping job"
              circleci-agent step halt
            fi

  store-logs:
    parameters:
      artifact_name:
        type: string
        default: "build"
      derived_data_path:
        type: string
        default: "build"
    description: "Save Logs as Artifacts"
    steps:
      - run:
          name: Zipping logs
          command: |
            export ZIP_FILE="$PWD/<< parameters.artifact_name >>.zip"
            cd "<< parameters.derived_data_path >>"
            zip -r "$ZIP_FILE" Build/Products || echo "Skipping Build/Products"
            zip -r "$ZIP_FILE" Build/ProfileData || echo "Skipping Build/ProfileData"
            zip -r "$ZIP_FILE" Logs || echo "Skipping Logs"
          when: always
      - store_artifacts:
          path: << parameters.artifact_name >>.zip

  store-device-farm-artifacts:
    parameters:
      artifact_name:
        type: string
        default: "build"
    description: "Save Device Farm Results as Artifacts"
    steps:
      - run:
          name: Zipping device farm results
          command: |
            zip -r << parameters.artifact_name >>.zip build/DeviceFarmResults || echo "Skipping build/DeviceFarmResults"
            zip -r << parameters.artifact_name >>.zip build/Payload || echo "Skipping build/Payload"
            zip -r << parameters.artifact_name >>.zip build/test-root || echo "Skipping build/test-root"
            zip -r << parameters.artifact_name >>.zip build/testruns || echo "Skipping build/testruns"
            zip -r << parameters.artifact_name >>.zip build/*.json || echo "Skipping build/*.json"
          when: always
      - store_artifacts:
          path: << parameters.artifact_name >>.zip

  install-dependencies:
    description: "Install Dependencies"
    steps:
      - run: make deps
      - run: pip3 install awscli gitpython requests python-dateutil

  make-docs:
    description: "Generate Documentation"
    steps:
      - run: git submodule update --init -- jazzy-theme
      - run: cd scripts/doc-generation && ./generate-docs.sh
      - run: zip -r api-docs.zip api-docs
      - store_artifacts:
          path: api-docs.zip

  make-xcframework-bundle:
    parameters:
      bundle_style:
        type: string
        default: "dynamic"
    description: "Create << parameters.bundle_style >> xcframework bundle"
    steps:
      - run:
          name: Install xcframework dependencies
          command: brew install jq xcodegen
      - run:
          name: Creating << parameters.bundle_style >> bundled artifact
          command: |
            echo "Navigating to packager script"
            cd scripts/release/packager
            ./package-mapbox-maps.sh << parameters.bundle_style >>
            echo "Moving zip to project root"
            mv MapboxMaps-<< parameters.bundle_style >>.zip /Users/distiller/project/
            echo "Return to root of project"
            cd /Users/distiller/project/
      - store_artifacts:
          path: MapboxMaps-<< parameters.bundle_style >>.zip

  report-failure:
    parameters:
      report_failure:
        type: boolean
        default: false
      message:
        type: string
        default: ""
    steps:
      - run:
          name: Detected failure, report to Slack? << parameters.report_failure >>
          command: |
            if ! << parameters.report_failure >> ; then
              echo "Skipping Slack notification"
              circleci-agent step halt
            fi
          when: on_fail
      - slack/status:
          fail_only: true
          include_visit_job_action: true
          mentions: '$CIRCLE_USERNAME'
          only_for_branches: main
          failure_message: ':tests-fail-red-cross: <$CIRCLE_BUILD_URL| << parameters.message >> failed.>'

  configure-netrc:
    steps:
      - run:
          name: Configure .netrc
          command: echo "machine api.mapbox.com login mapbox password $SDK_REGISTRY_TOKEN" >> ~/.netrc

  # See https://stackoverflow.com/a/58186048
  xcode-github-workaround:
    steps:
      - run:
          name: Work around Xcode's issue with GitHub's SSH fingerprint
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts

  locate-derived-data-directory:
    parameters:
      base_name:
        type: string
    steps:
      - run:
          name: Locate derived data directory
          command: |
            echo "export DERIVED_DATA_PATH=\"$(find ~/Library/Developer/Xcode/DerivedData -name "<< parameters.base_name >>*" -depth 1)\"" >> $BASH_ENV
