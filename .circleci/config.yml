---
version: 2.1

orbs:
  # https://circleci.com/orbs/registry/orb/circleci/slack
  slack: circleci/slack@4.5


### Shared anchors
release-precheck: &release-anchor
  filters:
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
    branches:
      ignore: /.*/
  requires:
    - release-precheck

### Workflows

workflows:

  # Runs daily at midnight UTC
  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - swiftlint:
          xcode: "12.5.0"
      - depsvalidator:
          xcode: "12.5.0"
      - build-sdk:
          matrix:
            parameters:
              xcode: ["12.5.0", "13.0.0"]
              configuration: ["Debug", "Release"]
              report_failure: [true]
      - build-debug-app:
          report_failure: true
          matrix:
            parameters:
              xcode: ["12.5.0", "13.0.0"]
      - unit-test-sdk:
          matrix:
            parameters:
              xcode: ["12.5.0", "13.0.0"]
              configuration: ["Debug", "Release"]
              report_failure: [true]
      - run-tests-on-devices:
          name: "Run MapboxTestHost tests on devices"
          xcode: "13.0.0"
          device-farm-project: $(DEVICE_FARM_PROJECT_MAPS)
          device-pool: $(DEVICE_FARM_5_DEVICE_POOL)
          scheme: "MapboxTestHost"
          app-name: "MapboxTestHost"
          device-tests-always-run: true
          report_failure: true
      - run-app-tests-on-devices:
          name: "Run Examples tests on devices"
          xcode: "13.0.0"
          device-farm-project: $(DEVICE_FARM_PROJECT_EXAMPLES)
          device-pool: $(DEVICE_FARM_EXAMPLES_POOL)
          scheme: "Examples"
          app-name: "Examples"
          device-tests-always-run: true
          report_failure: true
      - create-xcframework:
          create-xcframework-always-run: true
          report_failure: true
          matrix:
            parameters:
              xcode: ["12.5.0", "13.0.0"]

  steve:
    jobs:
      - swiftlint:
          xcode: "12.5.0"
      - depsvalidator:
          xcode: "12.5.0"
      - build-sdk:
          xcode: "12.5.0"
          matrix:
            parameters:
              configuration: ["Debug", "Release"]
      - build-debug-app:
          xcode: "12.5.0"
      - trigger-binary-size:
          requires:
            - build-sdk
      - trigger-metrics-build:
          requires:
            - build-sdk
      - trigger-metrics-collection:
          requires:
            - build-sdk
          filters:
            branches:
              only: main
      - unit-test-sdk:
          name: "Run Unit tests"
          xcode: "12.5.0"
      - build-test-host-tests
      # Not on main
      - run-tests-on-devices:
          name: "Run MapboxTestHost tests on devices"
          xcode: "13.0.0"
          device-farm-project: $(DEVICE_FARM_PROJECT_MAPS)
          device-pool: $(DEVICE_FARM_1_PHONE_POOL)
          scheme: "MapboxTestHost"
          app-name: "MapboxTestHost"
          filters:
            branches:
              ignore: main
      - run-app-tests-on-devices:
          name: "Run Examples tests on devices"
          xcode: "13.0.0"
          scheme: "Examples"
          app-name: "Examples"
          filters:
            branches:
              ignore: main
      # On main
      - run-tests-on-devices:
          name: "Run MapboxTestHost tests on devices (main)"
          xcode: "13.0.0"
          device-farm-project: $(DEVICE_FARM_PROJECT_MAPS)
          device-pool: $(DEVICE_FARM_5_DEVICE_POOL)
          scheme: "MapboxTestHost"
          app-name: "MapboxTestHost"
          device-tests-always-run: true
          report_failure: true
          filters:
            branches:
              only: main
      - run-app-tests-on-devices:
          name: "Run Examples tests on devices (main)"
          xcode: "13.0.0"
          device-farm-project: $(DEVICE_FARM_PROJECT_EXAMPLES)
          device-pool: $(DEVICE_FARM_EXAMPLES_POOL)
          scheme: "Examples"
          app-name: "Examples"
          device-tests-always-run: true
          report_failure: true
          filters:
            branches:
              only: main
      - check-api-compatibility
      - create-xcframework
      - validate-integrations-for-branch

  release:
    jobs:
      - release-precheck:
          <<: *release-anchor
          requires: [ ]
      - build-dynamic:
          <<: *release-anchor
      - build-static:
          <<: *release-anchor
      - build-docs:
          <<: *release-anchor
      - build-studio-preview:
          <<: *release-anchor
      - check-api-compatibility:
          <<: *release-anchor
      - create-registry-pr:
          <<: *release-anchor
          requires:
            - build-dynamic
            - build-static
            - build-docs
            - build-studio-preview
            - check-api-compatibility
      - wait-registry-pr:
          <<: *release-anchor
          requires:
            - create-registry-pr
          type: approval
      - check-registry:
          <<: *release-anchor
          requires:
            - wait-registry-pr
      - create-docs-prs:
          <<: *release-anchor
          requires:
            - check-registry
      - update-examples:
          <<: *release-anchor
          requires:
            - check-registry
      - publish-podspec:
          <<: *release-anchor
          requires:
            - check-registry
      - validate-integrations:
          <<: *release-anchor
          requires:
            - publish-podspec
      - create-draft-release:
          <<: *release-anchor
          requires:
            - create-docs-prs
            - update-examples
            - validate-integrations

# ==============================================================================

jobs:

  # This is a base job that can be merged into specific jobs. It uses anchors
  # and aliases as described here
  # https://circleci.com/docs/2.0/writing-yaml/#merging-maps
  base-job: &base-job
    parameters:
      xcode:
        type: string
        default: "12.5.0"
      device-farm-project:
        type: string
        default: $(DEVICE_FARM_PROJECT_MAPS)
      device-pool:
        type: string
        default: $(DEVICE_FARM_1_PHONE_POOL)
      device-tests-always-run:
        type: boolean
        default: false
      create-xcframework-always-run:
        type: boolean
        default: false
      configuration:
        type: string
        default: "Debug"
      report_failure:
        type: boolean
        default: false
      scheme:
        type: string
        default: "MapboxTestHost"
      app-name:
        type: string
        default: "MapboxTestHost"
    macos:
      xcode: << parameters.xcode >>
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      DEVICE_FARM_DEVICE_POOL: << parameters.device-pool >>
      DEVICE_FARM_PROJECT: << parameters.device-farm-project >>
      CONFIGURATION: << parameters.configuration >>
    steps:
      # Don't run the default job
      - run: exit 1

  swiftlint:
    <<: *base-job
    steps:
      - checkout
      - run: brew install swiftlint
      - run: swiftlint lint --strict --reporter junit | tee result.xml
      - store_artifacts:
          path: result.xml
      - store_test_results:
          path: result.xml

  depsvalidator:
    <<: *base-job
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - run:
          name: Build depsvalidator
          command: swift build --package-path scripts/depsvalidator
      - run:
          name: Run depsvalidator
          command: swift run --package-path scripts/depsvalidator depsvalidator

  build-sdk:
    <<: *base-job
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run:
          name: Building MapboxMaps for simulator
          command: make build-sdk-for-simulator
          no_output_timeout: 5m
      - run:
          name: Building MapboxMaps for device
          command: make build-sdk-for-device
          no_output_timeout: 5m
      - locate-derived-data-directory:
          base_name: $(basename $(pwd))
      - store-logs:
          derived_data_path: $DERIVED_DATA_PATH
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "build-sdk"
      - store-default-artifacts

  build-debug-app:
    <<: *base-job
    steps:
      - checkout
      - configure-environment
      - run:
          name: Building scheme DebugApp for simulator
          command: make build-app-for-simulator SCHEME=DebugApp
          no_output_timeout: 5m
      - run:
          name: Building scheme DebugApp for device
          command: make build-app-for-device SCHEME=DebugApp
          no_output_timeout: 5m
      - locate-derived-data-directory:
          base_name: Apps
      - store-logs:
          derived_data_path: $DERIVED_DATA_PATH
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "build-debug-app"
      - store-default-artifacts

  trigger-binary-size:
    <<: *base-job
    steps:
      - run:
          name: Trigger binary size test
          command: |
            if [ -n "${CIRCLECI_METRICS_TOKEN}" ]; then
              if [[ $CIRCLE_BRANCH == main ]]; then
                curl --fail -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-binary-size\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master?circle-token=${CIRCLECI_METRICS_TOKEN}
              else
                curl --fail -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-binary-size\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\",\"SOURCE_COMPARE_BASELINE\":\"YES\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master?circle-token=${CIRCLECI_METRICS_TOKEN}
              fi
            else
              echo "CIRCLECI_METRICS_TOKEN not provided"
            fi

  trigger-metrics-build:
    <<: *base-job
    steps:
      - run:
          name: Build metrics tests
          command: |
            if [ -n "${CIRCLECI_METRICS_TOKEN}" ]; then
              if [[ $CIRCLE_BRANCH == main ]]; then
                curl --fail -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-build\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master?circle-token=${CIRCLECI_METRICS_TOKEN}
              else
                echo "Trying $CIRCLE_BRANCH first:"
                if ! curl --fail -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-build\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/$CIRCLE_BRANCH?circle-token=${CIRCLECI_METRICS_TOKEN}; then
                  echo "Falling back to `master` branch:"
                  curl --fail -X POST --header "Content-Type: application/json" --data "{\"build_parameters\":{\"CIRCLE_JOB\":\"ios-maps-v10-build\",\"SOURCE_HASH\":\"${CIRCLE_SHA1}\",\"SOURCE_NAME\":\"ios-maps-v10\"}}" https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master?circle-token=${CIRCLECI_METRICS_TOKEN}
                fi
              fi
            else
              echo "CIRCLECI_METRICS_TOKEN not provided"
            fi

  trigger-metrics-collection:
    <<: *base-job
    steps:
      - run:
          # TODO: main by default (this is set as a filter), other commits on-demand
          name: Trigger metrics
          command: |
            if [ -n "${CIRCLECI_METRICS_TOKEN}" ]; then
              curl --fail -X POST --header "Content-Type: application/json" --data "{\"parameters\":{\"run_ios_maps_v10_benchmark\":true,\"ci_ref\":${CIRCLE_BUILD_NUM},\"mapbox_hash\":\"${CIRCLE_SHA1}\",\"target_branch\":\"${CIRCLE_BRANCH}\"},\"branch\":\"master\"}" https://circleci.com/api/v2/project/github/mapbox/mobile-metrics/pipeline?circle-token=${CIRCLECI_METRICS_TOKEN}
            else
              echo "CIRCLECI_METRICS_TOKEN not provided"
            fi
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "metrics"

  unit-test-sdk:
    <<: *base-job
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      # Building and testing are split into 2, with the aim that we'll be able to reuse
      # the build product and test on multiple simulators
      - run:
          name: Building MapboxMaps for simulator
          command: make build-sdk-for-testing-simulator
          no_output_timeout: 5m
      - run:
          name: Testing MapboxMaps with simulator
          command: make test-sdk-without-building-simulator
      - run:
          name: Compress XCResult
          command: zip -r MapboxMapsTests.xcresult.zip MapboxMapsTests.xcresult
          when: always
      - store_artifacts:
          path: MapboxMapsTests.xcresult.zip
      - locate-derived-data-directory:
          base_name: $(basename $(pwd))
      - run:
          name: Converting and uploading coverage
          command: |
            pip3 install awscli gitpython
            make update-codecov-with-profdata SCHEME=MapboxMaps BUILD_DIR="$DERIVED_DATA_PATH"
      - store-logs:
          artifact_name: MapboxMaps
          derived_data_path: $DERIVED_DATA_PATH
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "unit-test-sdk"

  build-test-host-tests:
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run:
          name: Build MapboxTestHost for testing
          command: |
            bundle install
            bundle exec fastlane build_tests_host
      - store_artifacts:
          path: output/build_products.zip

  # We may want to split this across multiple jobs, rather than multiple
  run-tests-on-devices:
    <<: *base-job
    steps:
      - checkout
      - configure-environment
      - ensure-text-exists-in-commit:
          commit-text: "[run device tests]"
          always-run: << parameters.device-tests-always-run >>
      - run:
          name: Install Device Farm Dependencies
          command: make install-devicefarm-dependencies
      - install-dependencies

      # There's a command for this, but it only works if run *after* the build.
      # In this case, we need to determine the derived data path *before* building.
      - run:
          name: Locate derived data directory
          command: |
            xcodegen
            xcodebuild \
              -showBuildSettings \
              -project MapboxMaps.xcodeproj \
              -scheme 'MapboxTestHost' \
              | sed -n 's:^ *BUILD_DIR = \(.*\)/Build/Products$:export DERIVED_DATA_PATH="\1":p' \
              >> $BASH_ENV
      - run:
          name: Testing << parameters.scheme >> on AWS Device Farm
          command: |
            make test-with-device-farm \
              SCHEME=<< parameters.scheme >> \
              APP_NAME=<< parameters.app-name >> \
              CONFIGURATION=Release \
              BUILD_DIR="$DERIVED_DATA_PATH"
          when: always
      # get xcresults here, may be zipped with more than one result
      - run:
          name: "Gathering results"
          command: make gather-results BUILD_DIR="$DERIVED_DATA_PATH"
          when: always
      - run:
          name: "Parsing xcresults for errors"
          command: |
            RESULTS=`find "$DERIVED_DATA_PATH/testruns" -name '*.xcresult'`
            xargs swift run --package-path scripts/xcparty xcparty \<<< "$RESULTS" | tee "$DERIVED_DATA_PATH/testruns/failures.txt"
          when: on_fail
      - run:
          name: Symbolicate crash logs
          command: |
            make symbolicate \
              SCHEME=<< parameters.scheme >> \
              APP_NAME=<< parameters.app-name >> \
              CONFIGURATION=Release \
              BUILD_DIR="$DERIVED_DATA_PATH" || true
          when: always
      - run:
          name: Converting and uploading coverage
          command: |
            make device-update-codecov-with-profdata \
              SCHEME=<< parameters.scheme >> \
              APP_NAME=<< parameters.app-name >> \
              CONFIGURATION=Release \
              BUILD_DIR="$DERIVED_DATA_PATH"
      - store-device-farm-artifacts:
          derived_data_path: $DERIVED_DATA_PATH
      - store-logs:
          derived_data_path: $DERIVED_DATA_PATH
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "<< parameters.scheme >> device tests"

  run-app-tests-on-devices:
    <<: *base-job
    steps:
      - checkout
      - ensure-text-exists-in-commit:
          commit-text: "[run app device tests]"
          always-run: << parameters.device-tests-always-run >>
      - configure-environment
      - setup-google-cloud-account
      - run:
          name: Start Firebase lane
          command: |
            bundle install
            bundle exec fastlane firebase
      - install-gcloud
      - install-dependencies
      - login-google-cloud-platform
      # There's a command for this, but it only works if run *after* the build.
      # In this case, we need to determine the derived data path *before* building.
      - run:
          name: Locate derived data directory
          command: |
            xcodebuild \
              -showBuildSettings \
              -workspace Apps/Apps.xcworkspace \
              -scheme '<< parameters.scheme >>' \
              | sed -n 's:^ *BUILD_DIR = \(.*\)/Build/Products$:export DERIVED_DATA_PATH="\1":p' \
              >> $BASH_ENV
          when: always
      - get-test-results-from-firebase:
            scheme: << parameters.scheme >>
      - run:
          name: "Parsing xcresults for errors"
          command: |
            RESULTS=`find "$DERIVED_DATA_PATH" -name '*.xcresult'`
            xargs swift run --package-path scripts/xcparty xcparty \<<< "$RESULTS" | tee "$DERIVED_DATA_PATH/failures.txt"
          when: on_fail
      - run:
          name: Symbolicate crash logs
          command: |
            make symbolicate \
              SCHEME=<< parameters.scheme >> \
              APP_NAME=<< parameters.app-name >> \
              CONFIGURATION=Debug \
              BUILD_DIR="$DERIVED_DATA_PATH" || true
          when: always
      - run:
          name: Converting and uploading coverage
          when: always
          command: |
            pip3 install awscli gitpython
            make device-update-codecov-with-profdata \
              SCHEME=<< parameters.scheme >> \
              APP_NAME=<< parameters.app-name >> \
              CONFIGURATION=Debug \
              BUILD_DIR="$DERIVED_DATA_PATH"
      - store-firebase-artifacts:
          derived_data_path: $DERIVED_DATA_PATH
      - store-logs:
          derived_data_path: $DERIVED_DATA_PATH
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "<< parameters.scheme >> device tests"

  create-xcframework:
    <<: *base-job
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - ensure-text-exists-in-commit:
          commit-text: "[create xcframework]"
          always-run: << parameters.create-xcframework-always-run >>
      - install-dependencies
      - make-xcframework-bundle:
          bundle_style: "dynamic"
      - when:
        # Do not run Check Compatibility API for Xcode 12
            condition:
              not:
                matches:
                  pattern: "^12.*$"
                  value: << parameters.xcode >>
            steps:
              - check-breaking-api:
                  bundle_path: MapboxMaps.zip
      - store_artifacts:
          path: MapboxMaps.zip
      - make-xcframework-bundle:
          bundle_style: "static"
      - when:
        # Do not run Check Compatibility API for Xcode 12
            condition:
              not:
                matches:
                  pattern: "^12.*$"
                  value: << parameters.xcode >>
            steps:
              - check-breaking-api:
                  bundle_path: MapboxMaps-static.zip
      - store_artifacts:
          path: MapboxMaps-static.zip
      - report-failure:
          report_failure: << parameters.report_failure >>
          message: "create-xcframework"

  check-api-compatibility:
    <<: *base-job
    macos:
      xcode: 13.0.0
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - check-breaking-api
      - store-default-artifacts

  validate-integrations-for-branch:
    description: <
      This job is designed to be called on daily bases.
      It is validating dependency managers integration per branch version rule.
      However, this job would run exclusively for open PRs to the release branches (aka "release/v.*"")
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run: brew install xcodegen
      - run:
          name: Validate SPM and CocoaPods integrations for current branch
          command: scripts/validate-integrations/validate-integrations.sh -b $CIRCLE_BRANCH
      - store-default-artifacts

  validate-integrations:
    description: <
      This job is designed to be called after SDK Registry PR merge.
      It requires binaries to be publicly available and downloadable.
      SPM, Cocoapods and DirectDownload tests would be called.
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run:
          name: Inject new Podspec version to CDN cache
          description: |
            Force adding new version to the cache to avoid long running clone operation
            The following command would take the latest CocoaPods version from cache.

            Alternative is to replace CDN with Specs repository and checkout it for the latest changes. It usually takes 3+ minutes on CircleCI
          command: |
            source scripts/utilities/cocoapods.sh
            pod_inject_cdn_version MapboxMaps "$VERSION"
      - run:
          name: Test direct download integrations
          command: scripts/validate-integrations/validate-integrations.sh -v "$VERSION"
      - store-default-artifacts
      - slack-notify-failure-if-any

  release-precheck:
    macos:
      xcode: 13.2.1
    steps:
      - checkout
      - parse-release-version-if-available
      - run:
          name: Podspec points to the release version
          command: '[[ $(pod ipc spec  MapboxMaps.podspec | jq -r .version) == "$VERSION" ]]'
      - slack-notify-failure-if-any

  build-dynamic:
    macos:
      xcode: 12.5.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run:
          name: Build dynamic SDK
          command: ./package-mapbox-maps.sh dynamic
          working_directory: scripts/release/packager
      - store_artifacts:
          path: scripts/release/packager/MapboxMaps.zip
      - run:
          name: Upload to S3
          command: scripts/release/upload-to-registry.sh scripts/release/packager/MapboxMaps.zip mobile-maps-ios "$VERSION" MapboxMaps.zip
      - slack-notify-failure-if-any

  build-static:
    macos:
      xcode: 12.5.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run:
          name: Build dynamic SDK
          command: ./package-mapbox-maps.sh static
          working_directory: scripts/release/packager
      - store_artifacts:
          path: scripts/release/packager/MapboxMaps-static.zip
      - run:
          name: Upload to S3
          command: scripts/release/upload-to-registry.sh scripts/release/packager/MapboxMaps-static.zip mobile-maps-ios-static "$VERSION" MapboxMaps-static.zip
      - slack-notify-failure-if-any

  build-docs:
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - make-docs
      - slack-notify-failure-if-any

  build-studio-preview:
    macos:
      xcode: 13.2.1
    steps:
      - checkout
      - configure-environment
      - run:
          name: Build Studio Preview with new branch
          command: scripts/validate-integrations/validate-studio-preview.sh -c "$CIRCLE_SHA1"
      - slack-notify-failure-if-any

  create-registry-pr:
    macos:
      xcode: 13.2.1
    steps:
      - checkout
      - configure-environment
      - attach_workspace:
          at: workspace
      - run: ls -lGA workspace
      - run:
          name: Create SDK Registry PR
          command: scripts/release/create-api-downloads-pr.sh mobile-maps-ios "$VERSION"
      - slack-notify-failure-if-any

  check-registry:
    docker:
      - image: cimg/base:stable
    steps:
      - parse-release-version-if-available
      - inject-netrc-credentials
      - run:
          name: Wait binaries public access
          command: |
            echo $VERSION
            timeout 1800 bash -c 'while [[ "$(curl -n -s -o /dev/null -w ''%{http_code}'' https://api.mapbox.com/downloads/v2/mobile-maps-ios/releases/ios/$VERSION/MapboxMaps.zip)" != "200" ]]; do sleep 5; done' || false
          no_output_timeout: 30m
      - slack-notify-failure-if-any

  create-docs-prs:
    macos:
      xcode: 13.2.1
    steps:
      - checkout
      - configure-environment
      - attach_workspace:
          at: workspace
      - run:
          name: Create documentation pull requests
          command: |
            unzip workspace/api-docs.zip -d .
            scripts/release/create-docs-prs.sh -p api-docs
      - store-default-artifacts
      - slack-notify-failure-if-any

  update-examples:
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run:
          name: Release Examples App to TestFlight
          command: |
            bundle install
            bundle exec fastlane beta
      - slack-notify-failure-if-any


  publish-podspec:
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run:
          name: Publish CocoaPods Podspec
          command: pod trunk push
      - slack-notify-failure-if-any

  create-draft-release:
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - configure-environment
      - run: brew install taiki-e/tap/parse-changelog
      - run:
          name: Create draft release on GitHub
          command: ./scripts/release/create-github-draft-release.sh "$VERSION"
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  wait-for-binaries:
    docker:
      - image: cimg/base:stable
    steps:
      - parse-release-version-if-available
      - inject-netrc-credentials
      - run:
          name: Wait binaries public access
          command: |
            echo $VERSION
            timeout 1800 bash -c 'while [[ "$(curl -n -s -o /dev/null -w ''%{http_code}'' https://api.mapbox.com/downloads/v2/mobile-maps-ios/releases/ios/$VERSION/MapboxMaps.zip)" != "200" ]]; do sleep 5; done' || false
          no_output_timeout: 30m

# ==============================================================================
# Reusable commands
commands:

  configure-environment:
    steps:
      # CircleCI's checkout step configures git so that it will always clone
      # from github.com via SSH. It also seeds the known_hosts file, however the
      # value it uses doesn't seem to work for xcodebuild when it is resolving
      # the Swift package graph. This step reverts CircleCI's git configuration
      # change so that xcodebuild can clone Swift packages via HTTPS.
      - run:
          name: Allow cloning from github.com via HTTPS
          command: git config --global --unset url."ssh://git@github.com".insteadOf
      - inject-netrc-credentials
      - inject-mapbox-public-token
      - declare-default-artifacts-path
      - parse-release-version-if-available
      - install-mbx-ci
      - add-mapbox-submodules-key
      - install-dependencies

  inject-netrc-credentials:
    steps:
      - run:
          name: Configure .netrc
          command: |
            echo "machine api.mapbox.com login mapbox password $SDK_REGISTRY_TOKEN" >> ~/.netrc
            chmod 0600 ~/.netrc

  inject-mapbox-public-token:
    steps:
      - run:
          name: Injecting Mapbox public token
          command: |
            echo "MAPBOX_ACCESS_TOKEN = ${MAPBOX_ACCESS_TOKEN}" > ./developer.xcconfig
            echo "${MAPBOX_ACCESS_TOKEN}" > ~/.mapbox
            echo "${MAPBOX_ACCESS_TOKEN}" > ./Tests/MapboxMapsTests/Helpers/MapboxAccessToken

  add-mapbox-submodules-key:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e"

  install-mbx-ci:
    parameters:
      platform:
        type: enum
        enum:
          - darwin
          - linux
        default: darwin
      arch:
        type: enum
        enum:
          - amd64
          - arm64
        default: amd64
      version:
        type: string
        default: latest
      install_path:
        type: string
        default: /usr/local/bin
    steps:
      - run:
          name: Install latest mbx-ci
          command: |
            curl -Ls https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/<<parameters.version>>/mbx-ci-<<parameters.platform>>-<<parameters.arch>> > <<parameters.install_path>>/mbx-ci
            chmod 755 <<parameters.install_path>>/mbx-ci
            mbx-ci aws setup

  ensure-text-exists-in-commit:
    parameters:
      commit-text:
        type: string
      always-run:
        type: boolean
    steps:
      - run:
          name: Check for "<< parameters.commit-text >>" in commit message
          command: |
            export RUN_JOB="$(git log -1 --pretty=%B | fgrep "<< parameters.commit-text >>" | wc -l)"
            if << parameters.always-run >>; then
              echo "Job configured to always run"
            elif [[ "$RUN_JOB" -ne "0" ]]; then
              echo "<< parameters.commit-text >> found."
            else
              echo "Skipping job"
              circleci-agent step halt
            fi

  setup-google-cloud-account:
    steps:
      - run:
          name: Setup Google Cloud default application credentials
          command: |
            mkdir -p ~/.config/gcloud/
            echo "${GOOGLE_CLOUD_KEY_FILE}" > ~/.config/gcloud/application_default_credentials.json

  login-google-cloud-platform:
    parameters:
      project:
        type: string
        default: mapbox-maps-ios-dc24c
    steps:
      - run:
          name: Log in to Google Cloud Platform
          command: gcloud auth activate-service-account --key-file ~/.config/gcloud/application_default_credentials.json --project << parameters.project >>

  get-test-results-from-firebase:
    parameters:
      scheme:
        type: string
        default: ""
    steps:
      - run:
          name: Retrieve TestResult from gcloud for << parameters.scheme >>
          command: |
            testResult=$(gsutil ls gs://${TEST_LAB_EXAMPLES}/<< parameters.scheme >>-${CIRCLE_BUILD_NUM}/iphone11-13.6-en_US-portrait)
            gsutil cp -r $testResult $DERIVED_DATA_PATH
          when: always

  store-logs:
    parameters:
      artifact_name:
        type: string
        default: "build"
      derived_data_path:
        type: string
        default: "build"
    description: "Save Logs as Artifacts"
    steps:
      - run:
          name: Zipping logs
          command: |
            export ZIP_FILE="$PWD/<< parameters.artifact_name >>.zip"
            cd "<< parameters.derived_data_path >>"
            zip -r "$ZIP_FILE" Build/Products || echo "Skipping Build/Products"
            zip -r "$ZIP_FILE" Build/ProfileData || echo "Skipping Build/ProfileData"
            zip -r "$ZIP_FILE" Logs || echo "Skipping Logs"
          when: always
      - store_artifacts:
          path: << parameters.artifact_name >>.zip

  store-device-farm-artifacts:
    parameters:
      artifact_name:
        type: string
        default: "DeviceFarm"
      derived_data_path:
        type: string
        default: "build"
    description: "Save Device Farm Results as Artifacts"
    steps:
      - run:
          name: Zipping device farm results
          command: |
            export ZIP_FILE="$PWD/<< parameters.artifact_name >>.zip"
            cd "<< parameters.derived_data_path >>"
            zip -r "$ZIP_FILE" DeviceFarmResults || echo "Skipping DeviceFarmResults"
            zip -r "$ZIP_FILE" Payload || echo "Skipping Payload"
            zip -r "$ZIP_FILE" test-root || echo "Skipping test-root"
            zip -r "$ZIP_FILE" testruns || echo "Skipping testruns"
            zip -r "$ZIP_FILE" *.json || echo "Skipping *.json"
          when: always
      - store_artifacts:
          path: << parameters.artifact_name >>.zip

  store-firebase-artifacts:
    parameters:
      artifact_name:
        type: string
        default: "firebase"
      derived_data_path:
        type: string
        default: "build"
    description: "Save firebase Results as Artifacts"
    steps:
      - run:
          name: Zipping firebase results
          command: |
            export ZIP_FILE="$PWD/<< parameters.artifact_name >>.zip"
            cd "<< parameters.derived_data_path >>"
            zip -r "$ZIP_FILE" xcodebuild_output.log || echo "Skipping xcodebuild_output.log"
            zip -r "$ZIP_FILE" video.mp4 || echo "Skipping video.mp4"
            zip -r "$ZIP_FILE" test_result_0.xml || echo "Skipping test_result_0.xml"
            zip -r "$ZIP_FILE" syslog.txt || echo "Skipping syslog.txt"
            zip -r "$ZIP_FILE" TestLogs || echo "Skipping TestLogs"
            zip -r "$ZIP_FILE" ProfileData || echo "Skipping ProfileData"
            zip -r "$ZIP_FILE" CrashLogs || echo "Skipping CrashLogs"
          when: always
      - store_artifacts:
          path: << parameters.artifact_name >>.zip

  install-gcloud:
    # Link for gcloud versions: https://cloud.google.com/sdk/docs/downloads-versioned-archives#installation_instructions
    parameters:
      version:
        type: string
        default: "google-cloud-sdk-367.0.0-linux-x86_64.tar.gz"
      checksum:
        type: string
        default: "94328b9c6559a1b7ec2eeaab9ef0e4702215e16e8327c5b99718750526ae1efe"
    description: "Install gcloud"
    steps:
      - run:
          name: Install gcloud
          command: |
            brew install ccache
            mkdir /tmp/gcloud && cd /tmp/gcloud
            curl -OL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/<< parameters.version >>
            echo '<< parameters.checksum >> *<< parameters.version >>' >> checksumfile
            shasum -a 256 -c checksumfile
            tar zxvf << parameters.version >>
            ./google-cloud-sdk/install.sh -q
            echo "source /tmp/gcloud/google-cloud-sdk/path.bash.inc" >> $BASH_ENV
            echo "source /tmp/gcloud/google-cloud-sdk/completion.bash.inc" >> $BASH_ENV
            source $BASH_ENV

  install-dependencies:
    description: "Install Dependencies"
    steps:
      - run:
          name: Install basic dependencies
          command: |
            pip3 install awscli gitpython requests python-dateutil
            brew install xcodegen gh

  make-docs:
    description: "Generate Documentation"
    steps:
      - run: git submodule update --init -- scripts/doc-generation/jazzy-theme
      - run: scripts/doc-generation/generate-maps-docs.sh
      - run: zip -r api-docs.zip api-docs
      - store_artifacts:
          path: api-docs.zip
      - persist_to_workspace:
          root: .
          paths:
            - api-docs.zip

  open-docs-pull-requests:
    steps:
      - run:
          name: Create documentation pull requests
          command: scripts/release/create-docs-prs.sh -p api-docs

  make-xcframework-bundle:
    parameters:
      bundle_style:
        type: string
        default: "dynamic"
    description: "Create << parameters.bundle_style >> xcframework bundle"
    steps:
      - run:
          name: Creating << parameters.bundle_style >> bundled artifact
          command: |
            echo "Navigating to packager script"
            cd scripts/release/packager
            ./package-mapbox-maps.sh << parameters.bundle_style >>
            echo "Moving zip to project root"
            mv MapboxMaps*.zip /Users/distiller/project/

  check-breaking-api:
    parameters:
      bundle_path:
        type: string
        default: scripts/release/packager/MapboxMaps.zip
    description: Compare public interface with pinned baseline with swift-api-digester
    steps:
      - run:
          name: Breaking API check
          command: scripts/api-compatibility-check/breaking-api-check.sh -p << parameters.bundle_path >>

  slack-notify-failure-if-any:
    steps:
      - slack/notify:
          event: fail
          mentions: '@maps-ios'
          template: basic_fail_1

  report-failure:
    parameters:
      report_failure:
        type: boolean
        default: false
      message:
        type: string
        default: ""
    steps:
      - run:
          name: Detected failure, report to Slack? << parameters.report_failure >>
          command: |
            if ! << parameters.report_failure >> ; then
              echo "Skipping Slack notification"
              circleci-agent step halt
            fi
          when: on_fail
      - slack/notify:
          branch_pattern: main
          event: fail
          custom: |
            {
              "text": "CircleCI job failed.",
              "blocks": [
                  {
                      "type": "header",
                      "text": {
                          "type": "plain_text",
                          "text": "Job Failed. :red_circle:",
                          "emoji": true
                      }
                  },
                  {
                      "type": "section",
                      "fields": [
                          {
                              "type": "mrkdwn",
                              "text": "*Job*: ${CIRCLE_JOB}"
                          }
                      ]
                  },
                  {
                      "type": "section",
                      "fields": [
                          {
                              "type": "mrkdwn",
                              "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                          },
                          {
                              "type": "mrkdwn",
                              "text": "*Branch*: $CIRCLE_BRANCH"
                          },
                          {
                              "type": "mrkdwn",
                              "text": "*Author*: @${CIRCLE_USERNAME}"
                          }
                      ],
                      "accessory": {
                          "type": "image",
                          "image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
                          "alt_text": "CircleCI logo"
                      }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Message*: << parameters.message >>"
                    }
                  },
                  {
                      "type": "actions",
                      "elements": [
                          {
                              "type": "button",
                              "text": {
                                  "type": "plain_text",
                                  "text": "View Job"
                              },
                              "url": "${CIRCLE_BUILD_URL}"
                          }
                      ]
                  }
              ]
            }

  locate-derived-data-directory:
    parameters:
      base_name:
        type: string
    steps:
      - run:
          name: Locate derived data directory
          command: |
            echo "export DERIVED_DATA_PATH=\"$(find ~/Library/Developer/Xcode/DerivedData -name "<< parameters.base_name >>*" -depth 1)\"" >> $BASH_ENV

  parse-release-version-if-available:
    steps:
      - run:
          name: Parse SDK version from release tag
          command: |
            if [[ -n "$CIRCLE_TAG" ]]; then
              echo "export VERSION=${CIRCLE_TAG#v}" >> $BASH_ENV
            fi

  declare-default-artifacts-path:
    steps:
      - run:
          name: Create default artifacts folder
          command: |
            echo "export DEFAULT_ARTIFACTS_DIR='$(mktemp -d)'" >> $BASH_ENV
            cat $BASH_ENV

  store-default-artifacts:
    steps:
      - run:
          name: Compress default artifacts
          command: |
            CURRENT_DIR=$(pwd)
            cd $DEFAULT_ARTIFACTS_DIR
            zip -yr "$CURRENT_DIR/artifacts.zip" . || true
          when: always
      - store_artifacts:
          path: artifacts.zip